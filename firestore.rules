// @module:platform-core @layer:repo @owner:studio
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user's role from their user document.
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if a user is an admin.
    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    // Helper function to check if a user is a teacher.
    function isTeacher(userId) {
        return getUserRole(userId) == 'teacher';
    }

    // Helper function to check if a user is a student.
    function isStudent(userId) {
        return getUserRole(userId) == 'student';
    }

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // >>> BEGIN gen:rules.users (layer:repo)
    match /users/{userId} {
      // Allow read access for authenticated users to view profiles.
      allow read: if isAuthenticated();
      
      // Allow a user to update their own document.
      // Allow an admin to update any user document.
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin(request.auth.uid));

      // Only admins can create or delete users.
      allow create, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    // <<< END gen:rules.users

    // >>> BEGIN gen:rules.classes (layer:repo)
    match /classes/{classId} {
      // Allow read if user is a member of the class or an admin.
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid)); // Simplified for now
      
      // Only admins and teachers can create, update, or delete classes.
      allow write: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
    }
    // <<< END gen:rules.classes

    // >>> BEGIN gen:rules.materials (layer:repo)
    match /materials/{materialId} {
        // Any authenticated user can read materials.
        allow read: if isAuthenticated();
        
        // Only admins and teachers can create, update, or delete materials.
        allow write: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
    }
    // <<< END gen:rules.materials

    // Assignments
    match /assignments/{assignmentId} {
        // Read access for the assigned user/class members, or admins/teachers.
        allow read: if isAuthenticated(); // Simplified rule
        
        // Write access for admins and teachers.
        allow write: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
    }

    // Submissions
    match /submissions/{submissionId} {
        // Read access for the student who submitted, the teacher grading it, or an admin.
        allow read: if isAuthenticated() && (isOwner(resource.data.studentId) || isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
        
        // Students can create submissions.
        allow create: if isAuthenticated() && isStudent(request.auth.uid);

        // Teachers and admins can update (grade) submissions.
        allow update: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    // Activity Log
    match /activity/{activityId} {
        // Read access for teachers and admins only.
        allow read: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
        
        // Any authenticated user can create an activity log entry (e.g., submitting an assignment).
        allow create: if isAuthenticated();
        
        // No one can update or delete activity logs through the client. Pruning should be a backend function.
        allow update, delete: if false;
    }
  }
}
